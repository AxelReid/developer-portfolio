// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Project {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  title       String
  tags        Tag[]             @relation(fields: [tagIds], references: [id])
  tagIds      String[]          @db.ObjectId
  categories  ProjectCategory[] @relation(fields: [categoryIds], references: [id])
  categoryIds String[]          @db.ObjectId
  image       String?
  demo_link   String?
  code_link   String?
}

model Tag {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  projects   Project[] @relation(fields: [projectIds], references: [id])
  projectIds String[]  @db.ObjectId
}

model Image {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  path        String
  relationIds String[] @db.ObjectId
}

model ProjectCategory {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  projects   Project[] @relation(fields: [projectIds], references: [id])
  projectIds String[]  @db.ObjectId
}

/////////////////////////////////////////////////////////////////////////////////
// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
}

enum Role {
  USER
  ADMIN
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
