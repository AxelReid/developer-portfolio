// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Project {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  demo_link   String?
  source_link String?
  published   Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  tags        Tag[]             @relation(fields: [tagIds], references: [id])
  tagIds      String[]          @db.ObjectId
  categories  ProjectCategory[] @relation(fields: [categoryIds], references: [id])
  categoryIds String[]          @db.ObjectId
  image       Image?            @relation(fields: [imageId], references: [id])
  imageId     String?           @db.ObjectId
}

model Tag {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  projects   Project[] @relation(fields: [projectIds], references: [id])
  projectIds String[]  @db.ObjectId
}

model ProjectCategory {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  projects   Project[] @relation(fields: [projectIds], references: [id])
  projectIds String[]  @db.ObjectId
}

model Feedback {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  user User?  @relation(fields: [userId], references: [id])

  feedback String
  bio      String?
  rating   Int?
  name     String?
  avatar   Image?  @relation(fields: [imageId], references: [id])
  imageId  String? @db.ObjectId

  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?  @db.ObjectId
}

model Image {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  url       String     @unique
  Feedback  Feedback[]
  Project   Project[]
}

/////////////////////////////////////////////////////////////////////////////////

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  bio       String?
  email     String?    @unique
  image     String?
  role      Role       @default(USER)
  providers String[]
  feedbacks Feedback[]
}

enum Role {
  USER
  ADMIN
}
