// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  bio       String?
  email     String?    @unique
  image     String?
  role      Role       @default(USER)
  providers String[]
  feedbacks Feedback[]
}

enum Role {
  USER
  ADMIN
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  demo_link   String?
  source_link String?
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tags        Tag[]    @relation(fields: [tagIds], references: [id])
  tagIds      String[] @db.ObjectId
  image       Image?   @relation(fields: [imageId], references: [id])
  imageId     String?  @db.ObjectId
}

model Tag {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  projects   Project[] @relation(fields: [projectIds], references: [id])
  projectIds String[]  @db.ObjectId
}

model Feedback {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  user User?  @relation(fields: [userId], references: [id])

  feedback String
  bio      String?
  rating   Int?
  name     String?
  avatar   Image?  @relation(fields: [imageId], references: [id])
  imageId  String? @db.ObjectId

  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?  @db.ObjectId
}

model Certificate {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String?
  image     Image?   @relation(fields: [imageId], references: [id])
  imageId   String?  @db.ObjectId
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  url         String        @unique
  Feedback    Feedback[]
  Project     Project[]
  Certificate Certificate[]
  Technology  Technology[]
  types       ImageType[]   @relation(fields: [typeIds], references: [id])
  typeIds     String[]      @db.ObjectId
}

model ImageType {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  images    Image[]  @relation(fields: [imageIds], references: [id])
  imageIds  String[] @db.ObjectId
}

model Technology {
  id          String               @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  name        String
  image       Image?               @relation(fields: [imageId], references: [id])
  imageId     String               @db.ObjectId
  level       TechnologyLevel      @relation(fields: [levelId], references: [id])
  levelId     String               @db.ObjectId
  categories  TechnologyCatagory[] @relation(fields: [categoryIds], references: [id])
  categoryIds String[]             @db.ObjectId
}

model TechnologyLevel {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  name       String
  technology Technology[]
}

model TechnologyCatagory {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  technologies Technology[] @relation(fields: [techIds], references: [id])
  techIds      String[]     @db.ObjectId
}
